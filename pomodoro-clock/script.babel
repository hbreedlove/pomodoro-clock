class Controls extends React.Component {
  render() {
    return (
      <div className="control-wrap">
        <div className="old-break-wrap">
          <div id={this.props.labelID}>{this.props.title}</div>
          <div id={this.props.lengthID}>{this.props.length}</div>
          <button id={this.props.minID} className="btn" onClick={this.props.onClick} value='-'>
            <i className="fa fa-arrow-down" />
          </button>
          <button id={this.props.maxID} className="btn" onClick={this.props.onClick} value='+'>
            <i className="fa fa-arrow-up" />
          </button>
        </div>
        
      </div>
    );
  }
}

class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      breakLength: 5,
      seshLength: 25,
      timerType: 'Session',
      timerState: 'stopped',
      timer: 1500,
      intervalID: '',
      alarmColor: {color: 'white'}
    };
    this.setBreak = this.setBreak.bind(this);
    this.setSesh = this.setSesh.bind(this);
    this.lengthControl = this.lengthControl.bind(this);
    this.makeClock = this.makeClock.bind(this);
    this.startStop = this.startStop.bind(this);
    this.startCount = this.startCount.bind(this);
    this.decrementTime = this.decrementTime.bind(this);
    this.phaseControl = this.phaseControl.bind(this);
    this.buzzer = this.buzzer.bind(this);
    this.warning = this.warning.bind(this);
    this.changeTimer = this.changeTimer.bind(this);
    this.reset = this.reset.bind(this);
  }
  
  setBreak(e) {
    this.lengthControl('breakLength', e.currentTarget.value, this.state.breakLength, 'Session');
  }
  setSesh(e) {
    this.lengthControl('seshLength', e.currentTarget.value, this.state.seshLength, 'Break');
  }
  lengthControl(stateToChange, sign, currentTime, timerType) {
    if(this.state.timerState == 'running') return;
    if(this.state.timerType == timerType) {
      if(sign =='-' && currentTime != 1) {
        this.setState({[stateToChange]: currentTime - 1});
      } else if(sign == '+' && currentTime != 60) {
        this.setState({[stateToChange]: currentTime + 1});
      }
    } else {
      if(sign =='-' && currentTime != 1) {
        this.setState({[stateToChange]: currentTime - 1,
        timer: currentTime * 60 - 60});
      } else if(sign == '+' && currentTime != 60) {
        this.setState({[stateToChange]: currentTime + 1,
        timer: currentTime * 60 + 60});
      }
    }
  }
  makeClock() {
    let minutes = Math.floor(this.state.timer/60);
    let seconds = this.state.timer -minutes* 60;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    return minutes + ':' + seconds;
  }
  startStop() {
    let control = this.state.timerState == 'stopped' ? (
    this.startCount(),
    this.setState({
      timerState: 'running'
    })
    ):(
    this.setState({timerState: 'stopped'}),
    this.state.intervalID && this.state.intervalID.cancel()
    );
}
  startCount() {
    this.setState({
      intervalID: accurateInterval(() =>{
      this.decrementTime();
      this.phaseControl();
    }, 1000)
    })
  }
  decrementTime() {
    this.setState({
      timer: this.state.timer - 1
    });
  }
  phaseControl() {
    let timer = this.state.timer;
    this.warning(timer);
    this.buzzer(timer);
    if (timer < 0) {
      this.state.timerType == 'Session' ? (
      this.state.intervalID && this.state.intervalID.cancel(),
        this.startCount(),
        this.changeTimer(this.state.breakLength * 60, 'Break')
      ) : (
      this.state.intervalID && this.state.intervalID.cancel(),
        this.startCount(),
        this.changeTimer(this.state.seshLength * 60, 'Session')
      );
    }
  }
  
  warning(_timer) {
    let warn = _timer < 61 ?
        this.setState({alarmColor: {color: 'red'}}) :
    this.setState({alarmColor: {color: 'white'}});
  }
  
  buzzer(_timer) {
    if (_timer === 0) {
      this.audioBeep.play();
    }
  }
  
  changeTimer(num, str) {
    this.setState({
      timer: num,
      timerType: str,
      alarmColor: {color: 'white'}
    })
  }
  
  reset() {
    this.setState({
      breakLength: 5,
      seshLength: 25,
      timerType: 'Session',
      timerState: 'stopped',
      timer: 1500,
      intervalID: '',
      alarmColor: {color: 'white'}
    });
    this.state.intervalID && this.state.intervalID.cancel();
    this.audioBeep.pause();
    this.audioBeep.currentTime = 0;
  }
  
  render() {
    return (
      <div className="clock">
        <Controls 
          title='Break Length'
          labelID='break-label'
          length={this.state.breakLength}
          minID='break-decrement'
          maxID='break-increment'
          lengthID='break-length'
          onClick={this.setBreak}/>
        <Controls 
          title='Session Length'
          labelID='session-label'
          length={this.state.seshLength}
          minID='session-decrement'
          maxID='session-increment'
          lengthID='session-length'
          onClick={this.setSesh}/>
        <div className="timer-wrap" style ={this.state.alarmColor}>
          <h1 id="timer-label">{this.state.timerType}</h1>
          <div id="time-left">{this.makeClock()}</div>
          <div id="start-wrap">
            <button id="start_stop" className="btn" onClick={this.startStop}>
              <i className="fa fa-play" />
              <i className="fa fa-pause" />
            </button>
            <button id="reset" className="btn" onClick={this.reset}>
              <i className="fa fa-refresh" />
            </button>
          </div>
          
        </div>
        <audio id="beep" preload="auto" 
          src="https://goo.gl/65cBl1"
          ref={(audio) => { this.audioBeep = audio; }} />
      </div>
    );
  }
}

ReactDOM.render(<Clock />, document.getElementById("app"));
